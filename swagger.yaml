basePath: /
consumes:
- application/json
definitions:
  Applications:
    properties:
      CreatedAt:
        format: date-time
        type: string
      job_id:
        type: string
        x-go-name: Job_ID
      status:
        type: string
        x-go-name: Status
      user_id:
        type: string
        x-go-name: U_ID
    type: object
    x-go-package: _/home/sarmad/Go_Practice/PostJson/structures
  Category:
    properties:
      id:
        type: string
        x-go-name: ID
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-package: _/home/sarmad/Go_Practice/PostJson/structures
  Experience:
    properties:
      experience:
        description: Experience Details
        type: string
        x-go-name: Experience
      user_id:
        description: User ID
        type: string
        x-go-name: U_ID
    type: object
    x-go-package: _/home/sarmad/Go_Practice/PostJson/structures
  Jobs:
    properties:
      CreatedAt:
        description: Job creation time
        format: date-time
        type: string
      cat_id:
        description: Job Category ID
        type: string
        x-go-name: Cat_ID
      description:
        description: Description of the job
        type: string
        x-go-name: Description
      designation:
        description: job Designation or name
        type: string
        x-go-name: Designation
      id:
        description: ID of the job
        type: string
        x-go-name: ID
      location:
        description: Location of the job
        type: string
        x-go-name: Location
      org_id:
        description: ID of the organization posting the job
        type: string
        x-go-name: Org_id
      salary:
        description: Estimated salary of the job
        type: string
        x-go-name: Salary
    type: object
    x-go-package: _/home/sarmad/Go_Practice/PostJson/structures
  Memberships:
    properties:
      CreatedAt:
        description: created time
        format: date-time
        type: string
      org_id:
        description: Id of organization against which member is to be added
        type: string
        x-go-name: Org_ID
      pk:
        description: Membership ID
        type: string
        x-go-name: ID
      user_id:
        description: ID of the user to abe added as a member
        type: string
        x-go-name: U_ID
    type: object
    x-go-package: _/home/sarmad/Go_Practice/PostJson/structures
  Organizations:
    properties:
      CreatedAt:
        description: Created Time
        format: date-time
        type: string
      about:
        description: About organization
        type: string
        x-go-name: About
      id:
        description: ID of organization
        type: string
        x-go-name: Org_ID
      name:
        description: Name of organization
        type: string
        x-go-name: Name
      user_id:
        description: Organization's owner's ID
        type: string
        x-go-name: U_ID
      website:
        description: Organization's website
        type: string
        x-go-name: Website
    type: object
    x-go-package: _/home/sarmad/Go_Practice/PostJson/structures
  Profile:
    properties:
      Experience:
        items:
          $ref: '#/definitions/Experience'
        type: array
      Skills:
        items:
          $ref: '#/definitions/Skills'
        type: array
      education:
        type: string
        x-go-name: Education
      phone:
        type: string
        x-go-name: Phone
      user_id:
        type: string
        x-go-name: U_ID
    type: object
    x-go-package: _/home/sarmad/Go_Practice/PostJson/structures
  RequiredSkills:
    properties:
      job_id:
        description: Job ID against which skill is to be added.
        type: string
        x-go-name: Job_ID
      skill:
        description: skill name
        type: string
        x-go-name: Skill
    type: object
    x-go-package: _/home/sarmad/Go_Practice/PostJson/structures
  Skills:
    properties:
      skill:
        description: Experience Details
        type: string
        x-go-name: Skill
      user_id:
        description: User ID
        type: string
        x-go-name: U_ID
    type: object
    x-go-package: _/home/sarmad/Go_Practice/PostJson/structures
  Users:
    properties:
      CreatedAt:
        description: User created time
        format: date-time
        type: string
      email:
        description: The email of the user
        type: string
        x-go-name: Email
      id:
        description: The uuid of a user
        type: string
        x-go-name: ID
      name:
        description: The name of a user
        type: string
        x-go-name: Name
      pass:
        description: The password of the user
        type: string
        x-go-name: Pass
    type: object
    x-go-package: _/home/sarmad/Go_Practice/PostJson/structures
host: localhost:5020
info:
  contact:
    email: srmdmjtba@gmail.com
    name: Sarmad Mujtaba
  title: Final Year Project - APIs.
  version: 0.0.1
paths:
  /application:
    post:
      description: You can add a user's application to a job through this endpoint
        by filling in the details of the user and the job.
      operationId: post-application
      responses:
        "200":
          description: Applications
          schema:
            $ref: '#/definitions/Applications'
        "400":
          $ref: '#/responses/Error'
        "409":
          $ref: '#/responses/Error'
      summary: Add Application
      tags:
      - Application
  /category:
    get:
      description: 'This endpoint returns category specific jobs (1: Full-Time, 2:
        Part-Time, 3: Internship) if you pass that category ID as a query parameter'
      operationId: get-category
      responses:
        "200":
          description: Jobs
          schema:
            $ref: '#/definitions/Jobs'
        "400":
          $ref: '#/responses/Error'
      summary: Lists all jobs of a category
      tags:
      - Jobs
  /jobs:
    delete:
      description: This endpoint deletes a Job if you pass its ID as a query parameter
      operationId: deleteJob
      responses:
        "200":
          $ref: '#/responses/Error'
        "400":
          $ref: '#/responses/Error'
      summary: Delete Job
      tags:
      - Jobs
    get:
      description: This endpoint returns all Jobs if no query parameter is passed.
        However, it returns organization specific jobs if you pass that organization's
        ID as a query parameter
      operationId: get-jobs
      responses:
        "200":
          description: Jobs
          schema:
            $ref: '#/definitions/Jobs'
        "400":
          $ref: '#/responses/Error'
        "404":
          $ref: '#/responses/Error'
      summary: Lists all / single Job
      tags:
      - Jobs
    post:
      description: You can add a Job through this endpoint by filling in the details
        of the job to be added and the organization which is posting the job.
      operationId: post-job
      responses:
        "201":
          description: Jobs
          schema:
            $ref: '#/definitions/Jobs'
        "400":
          $ref: '#/responses/Error'
      summary: Add Job
      tags:
      - Jobs
  /jobs/designations:
    get:
      description: This endpoint returns designation specific jobs if you pass that
        designation's name as a query parameter
      operationId: get-designations
      responses:
        "200":
          description: Jobs
          schema:
            $ref: '#/definitions/Jobs'
        "400":
          $ref: '#/responses/Error'
        "404":
          $ref: '#/responses/Error'
      summary: Lists Jobs of given designation
      tags:
      - Jobs
  /jobs/skills:
    post:
      description: You can add multiple required skills for a job through this endpoint
        by filling in the details.
      operationId: post-RequiredSkill
      responses:
        "201":
          description: RequiredSkills
          schema:
            $ref: '#/definitions/RequiredSkills'
        "400":
          $ref: '#/responses/Error'
      summary: Add Required Skill
      tags:
      - Jobs
  /members:
    get:
      description: This endpoint returns all members of an organizations based on
        organization's ID passed as query parameter.
      operationId: get-members
      responses:
        "200":
          description: Memberships
          schema:
            $ref: '#/definitions/Memberships'
        "400":
          $ref: '#/responses/Error'
      summary: Lists Members
      tags:
      - Memberships
    post:
      description: You can add a member of an organization through this endpoint by
        filling in the details.
      operationId: post-members
      responses:
        "201":
          description: Memberships
          schema:
            $ref: '#/definitions/Memberships'
        "400":
          $ref: '#/responses/Error'
        "409":
          $ref: '#/responses/Error'
      summary: Add membership
      tags:
      - Memberships
  /organizations:
    delete:
      description: This endpoint deletes an organization if you pass its ID as a query
        parameter
      operationId: delete-organizations
      responses:
        "200":
          $ref: '#/responses/Error'
        "400":
          $ref: '#/responses/Error'
      summary: Delete Organization
      tags:
      - Organization
    get:
      description: This endpoint returns all organizations if no query parameter is
        passed. However, it returns single organization if you pass its ID as a query
        parameter
      operationId: get-organizations
      responses:
        "200":
          description: Organizations
          schema:
            $ref: '#/definitions/Organizations'
        "400":
          $ref: '#/responses/Error'
        "404":
          $ref: '#/responses/Error'
      summary: Lists all / single organizations
      tags:
      - Organization
    post:
      description: You can add an organization through this endpoint by filling in
        the details of the organization to be added.
      operationId: post-organizations
      responses:
        "201":
          description: Organizations
          schema:
            $ref: '#/definitions/Organizations'
        "400":
          $ref: '#/responses/Error'
        "404":
          $ref: '#/responses/Error'
      summary: Add organization
      tags:
      - Organization
  /profile:
    get:
      description: This endpoint returns a user's Profile if you pass its ID as a
        query parameter
      operationId: get-profile
      responses:
        "200":
          description: Users
          schema:
            $ref: '#/definitions/Users'
        "400":
          $ref: '#/responses/Error'
      summary: Get User's Profile
      tags:
      - Profile
    put:
      description: You can add a user profile through this endpoint by filling in
        the details of the user to be added.
      operationId: post-profile
      responses:
        "200":
          description: Profile
          schema:
            $ref: '#/definitions/Profile'
        "201":
          description: Users
          schema:
            $ref: '#/definitions/Users'
        "400":
          $ref: '#/responses/Error'
        "409":
          $ref: '#/responses/Error'
      summary: Add Profile
      tags:
      - Profile
  /profile/experience:
    post:
      description: You can add a user profile's experience through this endpoint by
        filling in the details of the user.
      operationId: add-experience
      responses:
        "201":
          description: Users
          schema:
            $ref: '#/definitions/Users'
        "400":
          $ref: '#/responses/Error'
      summary: Add Experience
      tags:
      - Profile
  /profile/skills:
    post:
      description: You can add a user profile's Skills through this endpoint by filling
        in the details of the user.
      operationId: add-skills
      responses:
        "201":
          description: Users
          schema:
            $ref: '#/definitions/Users'
        "400":
          $ref: '#/responses/Error'
      summary: Add Skill
      tags:
      - Profile
  /users:
    delete:
      description: This endpoint deletes a user if you pass its ID as a query parameter
      operationId: delete-users
      responses:
        "200":
          $ref: '#/responses/Error'
        "400":
          $ref: '#/responses/Error'
      summary: Delete User
      tags:
      - User
    get:
      description: This endpoint returns all users if no query parameter is passed.
        However, it returns single user if you pass its ID as a query parameter
      operationId: get-users
      responses:
        "200":
          description: Users
          schema:
            $ref: '#/definitions/Users'
        "400":
          $ref: '#/responses/Error'
        "404":
          $ref: '#/responses/Error'
      summary: Lists all / single users
      tags:
      - User
    post:
      description: You can add a user through this endpoint by filling in the details
        of the user to be added.
      operationId: post-users
      responses:
        "201":
          description: Users
          schema:
            $ref: '#/definitions/Users'
        "400":
          $ref: '#/responses/Error'
        "409":
          $ref: '#/responses/Error'
      summary: Add User
      tags:
      - User
produces:
- application/json
responses:
  Error:
    description: ""
schemes:
- http
swagger: "2.0"
